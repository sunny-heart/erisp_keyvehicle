package com.gkhb.keyvehicle.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gkhb.keyvehicle.common.model.Page;
import com.gkhb.keyvehicle.common.utils.SystemUtils;
import com.gkhb.keyvehicle.mapper.EarlyWarningInfoMapper;
import com.gkhb.keyvehicle.mapper.VehicleInfoMapper;
import com.gkhb.keyvehicle.model.EarlyWarningInfo;
import com.gkhb.keyvehicle.model.VehicleInfo;
import com.gkhb.keyvehicle.model.param.QueryConditionData;
import com.gkhb.keyvehicle.model.view.VehicleInfoView;

/**
 *	车辆信息服务接口实现类
 *	@author Colin
 *	@createTime 2017年7月3日 上午11:19:57
 */
@Service
public class VehicleInfoServiceImpl implements VehicleInfoService{
	
	protected Logger logger = LoggerFactory.getLogger(VehicleInfoServiceImpl.class);
	
	@Autowired
	private VehicleInfoMapper vehicleInfoMapper;

	@Autowired
	private EarlyWarningInfoMapper earlyWarningInfoMapper;
	
	@Override
	public int addOrUpdateVehicleInfo(VehicleInfo vehicleInfo) {
		try {
            if (vehicleInfo.getId() == null || vehicleInfo.getId().equals("")) {
                //添加车辆
            	List<VehicleInfoView> list = vehicleInfoMapper.queryVehicle();
            	for (VehicleInfoView vehicleInfo2 : list) {
					if(vehicleInfo.getPlateNumber().trim().equals(vehicleInfo2.getPlateNumber().trim())){
						return 2;
					}
				}
                String id = SystemUtils.createUuid();
                vehicleInfo.setId(id);
                vehicleInfoMapper.addVehicleInfo(vehicleInfo);
            }else {
            	vehicleInfoMapper.updateVehicleInfo(vehicleInfo);
            }
            return 1;
        } catch (Exception e) {
            if (vehicleInfo.getId() == null || vehicleInfo.getId().equals("")) {
                logger.error("车辆添加失败");
            }else {
                logger.error("车辆修改失败");
            }
            return 0;
        }
	}

	@Override
	public boolean deleteVehicleInfoById(String id) {
		try {
			System.out.println("进入了deleteVehicleInfoById");
			vehicleInfoMapper.deleteVehicleInfoById(id);
	        return true;
        } catch (Exception e) {
            logger.error("车辆删除失败");
            return false;
        }
	}

	@Override
	public VehicleInfo queryVehicleInfoById(String id) {
//		System.out.println("进入了queryVehicleInfoById");
//		System.out.println("-----"+vehicleInfoMapper.queryVehicleInfoById(id));
		return vehicleInfoMapper.queryVehicleInfoById(id);
	}

	@Override
	public List<VehicleInfoView> queryVehicleInfo(QueryConditionData queryConditionData,Page page) {
//		System.out.println("------"+vehicleInfoMapper.queryVehicleInfo(queryConditionData, page));
		return vehicleInfoMapper.queryVehicleInfo(queryConditionData,page);
	}

	@Override
	public List<VehicleInfoView> searchVehicleInfo(QueryConditionData queryConditionData,Page page) {
		return vehicleInfoMapper.searchVehicleInfo(queryConditionData,page);
	}
	
	@Override
	public List<VehicleInfoView> searchVehicleInfoByPlateNumber(String plateNumber) {
		return vehicleInfoMapper.searchVehicleInfoByPlateNumber(plateNumber);
	}

	@Override
	public List<VehicleInfoView> queryVehicle() {
		return vehicleInfoMapper.queryVehicle();
	}

	@Override
	public List<VehicleInfoView> searchVehicleInfoByVehicleType(QueryConditionData queryConditionData,String vehicleType) {
		List<VehicleInfoView> searchVehicleInfoByVehicleType = vehicleInfoMapper.searchVehicleInfoByVehicleType(queryConditionData, vehicleType);
		for (int i = 0; i < searchVehicleInfoByVehicleType.size(); i++) {
			if(searchVehicleInfoByVehicleType.get(i).getId() != null && searchVehicleInfoByVehicleType.get(i).getId() != ""){
				EarlyWarningInfo earlyWarningInfo = earlyWarningInfoMapper.queryEarlyWarningInfoByVehicleId(searchVehicleInfoByVehicleType.get(i).getId());
				System.out.println("++++++++++++++++++++++++++"+earlyWarningInfo);
				if(null == earlyWarningInfo || "".equals(earlyWarningInfo)){
//					searchVehicleInfoByVehicleType.get(i).setWarningEndTime();
				}else{
					searchVehicleInfoByVehicleType.get(i).setWarningType(earlyWarningInfo.getWarningType());
					searchVehicleInfoByVehicleType.get(i).setWarningEndTime(earlyWarningInfo.getWarningEndTime());
				}
			}
		}
		System.out.println("----VehicleInfoView-----"+searchVehicleInfoByVehicleType);
		return searchVehicleInfoByVehicleType;
	}

	private static Map<String,VehicleInfo> plateNumberCache = new HashMap<>();

	@Override
	public VehicleInfo queryVehicleInfoByPlateNumber(String plateNumber) {
		VehicleInfo vehicleInfo = plateNumberCache.get(plateNumber);
		if(null == vehicleInfo){
			logger.info("no cached vehicle info :" +plateNumber );
			vehicleInfo = vehicleInfoMapper.queryVehicleInfoByPlateNumber(plateNumber);
			plateNumberCache.put(plateNumber,vehicleInfo);
		}
		return vehicleInfo;
	}

}
