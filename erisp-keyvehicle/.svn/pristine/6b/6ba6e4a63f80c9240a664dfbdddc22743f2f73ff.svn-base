package com.gkhb.keyvehicle.controller;

import com.gkhb.keyvehicle.common.Constants;
import com.gkhb.keyvehicle.common.spring.BaseController;
import com.gkhb.keyvehicle.common.utils.HttpClientUtil;
import com.gkhb.keyvehicle.common.utils.SystemUtils;
import com.gkhb.keyvehicle.model.WarningRule;
import com.gkhb.keyvehicle.service.WarnRuleService;
import net.sf.json.JSONArray;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ExtendedModelMap;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 预警规则控制器
 *
 * @author touxin
 * @data 2017年9月23日
 */
@Controller
@RequestMapping(("/warningRule"))
public class WarningRuleController extends BaseController {

    private Logger logger = LoggerFactory.getLogger(WarningRuleController.class);

    @Autowired
    private WarnRuleService warnRuleService;

    /**
     * 添加预警规则
     *
     * @param warningRule
     * @return
     */
    @RequestMapping(value = {"/addSpeedRule", "addTimeAreaRule", "addTiredRule", "addBusFocusRule"}, method = RequestMethod.POST)
    public Model addRule(WarningRule warningRule) {
        int count = 0;
        Model model = new ExtendedModelMap();
        try {
            if (StringUtils.isBlank(warningRule.getId())) {
                warningRule.setId(SystemUtils.createUuid());
                warningRule.setCreateTime(new Date());
                warningRule.setUpdateTime(new Date());
            }
            if (warningRule.getRuleType().equals(WarningRule.Type.TIME_AREA)) {
                warningRule = parseTimeAreaTimeRange(warningRule);
            }
            count = warnRuleService.add(warningRule);
            remoteAddOrUpdateRule(warningRule);
            model.addAttribute("result", count);
            model.addAttribute("id", warningRule.getId());
        } catch (Exception e) {
            model.addAttribute("result", count);
        }
        return model;
    }

    /**
     * 解析适配时间区域规则的时间范围格式
     * @param warningRule
     * @return
     */
    private WarningRule parseTimeAreaTimeRange(WarningRule warningRule){
        DateFormat format = new SimpleDateFormat("HH:mm");
        JSONArray rule = JSONArray.fromObject(warningRule.getRule());
        JSONArray timeRange = rule.getJSONObject(0).getJSONArray("timeRange");
        for (int i = 0; i < timeRange.size(); i++) {
            try {
                String start = timeRange.getJSONObject(i).getString("start");
                String end = timeRange.getJSONObject(i).getString("end");
                if (StringUtils.isNotBlank(start)) {
                    timeRange.getJSONObject(i).put("start", format.parse(start).getTime());
                }
                if (StringUtils.isNotBlank(end)) {
                    timeRange.getJSONObject(i).put("end", format.parse(end).getTime());
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        warningRule.setRule(rule.toString());
        return warningRule;
    }

    /**
     * 解析适配时间区域规则的时间范围格式
     * @param warningRule
     * @return
     */
    private WarningRule formatTimeAreaTimeRange(WarningRule warningRule){
        DateFormat format = new SimpleDateFormat("HH:mm");
        JSONArray rule = JSONArray.fromObject(warningRule.getRule());
        JSONArray timeRange = rule.getJSONObject(0).getJSONArray("timeRange");
        for (int i = 0; i < timeRange.size(); i++) {
            try {
                String start = timeRange.getJSONObject(i).getString("start");
                String end = timeRange.getJSONObject(i).getString("end");
                if (StringUtils.isNotBlank(start)) {
                    timeRange.getJSONObject(i).put("start", format.format(new Date(Long.valueOf(start))));
                }
                if (StringUtils.isNotBlank(end)) {
                    timeRange.getJSONObject(i).put("end", format.format(new Date(Long.valueOf(end))));
                }
            }catch (Exception e){
                e.printStackTrace();
            }
        }
        warningRule.setRule(rule.toString());
        return warningRule;
    }

    /**
     * 远程调用数据服务新增和更新规则
     * @param warningRule
     */
    private void remoteAddOrUpdateRule(final WarningRule warningRule) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Map<String, String> map = BeanUtils.describe(warningRule);
                    String url = Constants.DATASERVICE_HOST_PATH + "/warningRule/addOrUpdateRule";
                    HttpClientUtil.getInstance().sendHttpPost(url, map, "utf-8");
                } catch (Exception e) {
                    logger.error("调用数据服务器失败！");
                }
            }
        }).start();
    }
    /**
     * 修改预警规则
     *
     * @param warningRule
     * @return
     */
    @RequestMapping(value = "/updateRule", method = RequestMethod.POST)
    public Model updateRule(WarningRule warningRule) {
        Model model = new ExtendedModelMap();
        int count = 0;
        if (StringUtils.isNotBlank(warningRule.getId())) {
            try {
                if (warningRule.getRuleType().equals(WarningRule.Type.TIME_AREA)) {
                    warningRule = parseTimeAreaTimeRange(warningRule);
                }
                count = warnRuleService.update(warningRule);
                remoteAddOrUpdateRule(warningRule);
            }catch (Exception e) {
                e.printStackTrace();
            }
            model.addAttribute("id", warningRule.getId());
        }
        model.addAttribute("result", count);
        return model;
    }

    @RequestMapping(value = "/queryWarningRuleList", method = RequestMethod.GET)
    public Model queryWarningRuleList(WarningRule warningRule) {
        Model model = new ExtendedModelMap();
        try {
            List<WarningRule> warningRules = warnRuleService.queryWarningRule(warningRule);
            for (WarningRule rule : warningRules) {
                if (rule.getRuleType().equals(WarningRule.Type.TIME_AREA)){
                    formatTimeAreaTimeRange(rule);
                }
            }
            model.addAttribute("warningRuleList", warningRules);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return model;
    }

    @RequestMapping(value = "/deleteWarningRule", method = RequestMethod.POST)
    public Model deleteWarningRule(final WarningRule warningRule) {
        Model model = new ExtendedModelMap();
        int count = 0;
        try {
            count = warnRuleService.delete(warningRule);
            new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        Map<String, String> map = BeanUtils.describe(warningRule);
                        String url = Constants.DATASERVICE_HOST_PATH + "/warningRule/delete";
                        HttpClientUtil.getInstance().sendHttpPost(url, map, "utf-8");
                    } catch (Exception e) {
                        logger.error("调用数据服务器失败！");
                    }
                }
            }).start();
        } catch (Exception e) {

        }
        model.addAttribute("result", count);
        return model;
    }
}
