package com.gkhb.keyvehicle.service.etl;

import java.text.ParseException;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.gkhb.keyvehicle.common.utils.DateUtils;
import com.gkhb.keyvehicle.service.VehicleOnlineStateService;

/**
 * 数据清洗服务类
 * 
 * @author 张顺江
 * @createTime 2016年4月11日 下午4:43:11
 */
@Service("accessEtlService")
public class AccessEtl implements AccessEtlService {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(AccessEtl.class);

    @Autowired
    private EtlService etlService;
    
    @Autowired
    private VehicleOnlineStateService vehicleOnlineStateService;

    /**
     * GPS数据预警清洗定时任务
     */
    ScheduledThreadPoolExecutor GPSWarningScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);
    ScheduledThreadPoolExecutor VehicleOnlineScheduledThreadPoolExecutor = new ScheduledThreadPoolExecutor(1);

    @Override
    public void startEtlServer() {
    	//车辆在线状态定时拉取
    	VehicleOnlineScheduledThreadPoolExecutor.scheduleWithFixedDelay(new ETLRunnableForVehicleState(vehicleOnlineStateService), 1 * 1000, 10 * 1000, TimeUnit.MILLISECONDS);
        // GPS数据预警清洗
        GPSWarningScheduledThreadPoolExecutor.scheduleWithFixedDelay(new EtlRunnableForGPS(etlService), 10 * 1000, 3 * 1000, TimeUnit.MILLISECONDS);
        // GPS实时表数据转移
        try {
            Timer timer = new Timer("move", true);
            timer.schedule(new TimerTask() {
                @Override
                public void run() {
                    etlService.moveGpsDataToHistoryTable();
                }
            }, DateUtils.getNextDate(new Date()), 60 * 60 * 24 * 1000);
        } catch (ParseException e) {
            LOGGER.error("startEtlServer is error:",e);
        }
    }

    @Override
    public boolean shutDownEtlServer() {
        if (null != GPSWarningScheduledThreadPoolExecutor && !GPSWarningScheduledThreadPoolExecutor.isShutdown()) {
            GPSWarningScheduledThreadPoolExecutor.shutdown();
        }
        return true;
    }

}
